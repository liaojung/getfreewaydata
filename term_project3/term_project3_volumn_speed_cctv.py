# -*- coding: utf-8 -*-
"""Term project3_Volumn_Speed_CCTV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NJU87oHPFLOjfxyveR3wmuXZIGxMX4bj
"""

#!pip install folium
#!wget -O jf-openhuninn-2.0.ttf https://github.com/justfont/open-huninn-font/releases/download/v2.0/jf-openhuninn-2.0.ttf
#助教要terminal先跑這個
#會有一個互動式網頁和五個圖片視窗跳出
import matplotlib
import matplotlib.pyplot as plt

#改字體
matplotlib.font_manager.fontManager.addfont('jf-openhuninn-2.0.ttf')
matplotlib.rc('font', family='jf-openhuninn-2.0')

import pandas as pd
import numpy as np
import folium
from folium import IFrame


#VD資料計算
#print("VD:25.85")
#這邊放csv連結，現在是雲端共享的csv載點
data = pd.read_csv('C:/Users/yingj/nycu/11201/巨集/3 陳彥佑/term_project3/VDlive_1222_S-25.85_1601_2000.csv',header = [0,1], index_col = 0)
data = data.replace(0, np.NAN)
data_VD2585 = pd.DataFrame()
#提取Speed, volume資料
for i in range(16,20):
  speed = data.loc[f"{i}:01":f"{i+1}:00"]["speed"]
  VD2585_speed = round(speed.mean(axis=0),2)
  VD2585_speed = pd.DataFrame(VD2585_speed, columns = ['Speed']).reset_index()
  vol = data.loc[f"{i}:01":f"{i+1}:00",["S_vol","L_vol","T_vol"]]
  VD2585_vol = vol.sum(axis=0)
  VD2585_vol = pd.DataFrame(VD2585_vol, columns = ['Volumn']).reset_index()
  VD2585_vol = VD2585_vol.groupby(['lanes']).sum(['Volumn']).reset_index().drop(['lanes'], axis = 1)
  VD2585_time = pd.concat([VD2585_speed, VD2585_vol], axis=1)
  VD2585_time['time'] = f"{i}時"
  data_VD2585 = pd.concat([data_VD2585, VD2585_time], ignore_index=False)
data_VD2585 = data_VD2585.set_index(keys = ['time','lanes'])
#print(data_VD2585)

#print("VD:26.35")
#這邊放csv連結
data = pd.read_csv('C:/Users/yingj/nycu/11201/巨集/3 陳彥佑/term_project3/VDlive_1222_S-26.35_1601_2000.csv',header = [0,1], index_col = 0)
data = data.replace(0, np.NAN)
data_VD2635 = pd.DataFrame()
#提取Speed, volume資料
for i in range(16,20):
  speed = data.loc[f"{i}:01":f"{i+1}:00"]["speed"]
  VD2635_speed = round(speed.mean(axis=0),2)
  VD2635_speed = pd.DataFrame(VD2635_speed, columns = ['Speed']).reset_index()
  vol = data.loc[f"{i}:01":f"{i+1}:00",["S_vol","L_vol","T_vol"]]
  VD2635_vol = vol.sum(axis=0)
  VD2635_vol = pd.DataFrame(VD2635_vol, columns = ['Volumn']).reset_index()
  VD2635_vol = VD2635_vol.groupby(['lanes']).sum(['Volumn']).reset_index().drop(['lanes'], axis = 1)
  VD2635_time = pd.concat([VD2635_speed, VD2635_vol], axis=1)
  VD2635_time['time'] = f"{i}時"
  data_VD2635 = pd.concat([data_VD2635, VD2635_time], ignore_index=False)
data_VD2635 = data_VD2635.set_index(keys = ['time','lanes'])
#print(data_VD2635)

#print("VD:28.84")
#這邊放csv連結
data = pd.read_csv('C:/Users/yingj/nycu/11201/巨集/3 陳彥佑/term_project3/VDlive_1222_S-28.84_1601_2000.csv',header = [0,1], index_col = 0)
data = data.replace(0, np.NAN)
data_VD2884 = pd.DataFrame()
#提取Speed, volume資料
for i in range(16,20):
  speed = data.loc[f"{i}:01":f"{i+1}:00"]["speed"]
  VD2884_speed = round(speed.mean(axis=0),2)
  VD2884_speed = pd.DataFrame(VD2884_speed, columns = ['Speed']).reset_index()
  vol = data.loc[f"{i}:01":f"{i+1}:00",["S_vol","L_vol","T_vol"]]
  VD2884_vol = vol.sum(axis=0)
  VD2884_vol = pd.DataFrame(VD2884_vol, columns = ['Volumn']).reset_index()
  VD2884_vol = VD2884_vol.groupby(['lanes']).sum(['Volumn']).reset_index().drop(['lanes'], axis = 1)
  VD2884_time = pd.concat([VD2884_speed, VD2884_vol], axis=1)
  VD2884_time['time'] = f"{i}時"
  data_VD2884 = pd.concat([data_VD2884, VD2884_time], ignore_index=False)
data_VD2884 = data_VD2884.set_index(keys = ['time','lanes'])
#print(data_VD2884)

#ETC248
#這邊放csv連結
data = pd.read_csv('C:/Users/yingj/nycu/11201/巨集/3 陳彥佑/term_project3/eTag_1222_01F0248S-01F0264S.csv',header = 0, index_col = 0)
data = data.replace(0, np.NAN)
data_ETC248 = pd.DataFrame()
#提取Speed, volume資料
for i in range(16,20):
  speed = data.loc[f"{i}:05":f"{i+1}:00",['31_SMS','32_SMS','41_SMS','42_SMS','5_SMS']]
  count = data.loc[f"{i}:05":f"{i+1}:00",['31_count','32_count','41_count','42_count','5_count']]
  speed = round(speed.mean(axis=0),2)
  count = count.sum(axis=0)
  ETC248_time = pd.DataFrame([[round(np.average(speed, weights=count),2),count.sum(),f'{i}時']], columns = ['Speed','Volume','Time'])
  data_ETC248 = pd.concat([data_ETC248, ETC248_time], ignore_index=False)
data_ETC248 = data_ETC248.set_index(keys = ['Time'])
#print(data_ETC248)


#ETC264
#這邊放csv連結
data = pd.read_csv('C:/Users/yingj/nycu/11201/巨集/3 陳彥佑/term_project3/eTag_1222_01F0264S-01F0293S.csv',header = 0, index_col = 0)
data = data.replace(0, np.NAN)
data_ETC264 = pd.DataFrame()
#提取Speed, volume資料
for i in range(16,20):
  speed = data.loc[f"{i}:05":f"{i+1}:00",['31_SMS','32_SMS','41_SMS','42_SMS','5_SMS']]
  count = data.loc[f"{i}:05":f"{i+1}:00",['31_count','32_count','41_count','42_count','5_count']]
  speed = round(speed.mean(axis=0),2)
  count = count.sum(axis=0)
  ETC264_time = pd.DataFrame([[round(np.average(speed, weights=count),2),count.sum(),f'{i}時']], columns = ['Speed','Volume','Time'])
  data_ETC264 = pd.concat([data_ETC264, ETC264_time], ignore_index=False)
data_ETC264 = data_ETC264.set_index(keys = ['Time'])
#print(data_ETC264)


'''
--------------------------------------------------------------------------------------------------------------------------------------------------------------
'''
#這段是互動式地圖

# Google Maps 地圖的 URL
google_maps_url = "https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}"
# 創建地圖，使用 Google Maps 底圖
map_taiwan = folium.Map(location=(25.07763, 121.501), zoom_start=14, tiles=google_maps_url, attr="Google Maps")

# CCTV顯示
data_CCTV = pd.read_json('https://drive.google.com/uc?export=download&id=1a-NFpuIEQoWT2Wo17tm_kffUfp6i_80S') #讀取CCTV資料(已經篩選過CCTV位置)
for i in range(6):
  cctv_link = data_CCTV.iloc[i][6]['VideoStreamURL']
  popup_content = f'<div style="font-size: 12px;"><iframe src="{cctv_link}" width="350" height="250"></iframe></div>'
  folium.Marker(location=(data_CCTV.iloc[i][6]['PositionLat'],data_CCTV.iloc[i][6]['PositionLon']), popup=folium.Popup(IFrame(html=popup_content, width=350, height=250), max_width=350), icon=folium.Icon(color='green', icon='camera')).add_to(map_taiwan)

#VD顯示 #資料運算在下面三欄程式碼
VD = {"VD_25.85":[(25.078184, 121.5066), data_VD2585], "VD_26.35":[(25.07763, 121.50196), data_VD2635], "VD_28.84":[(25.0738, 121.478), data_VD2884]}
for i in VD:
  html = f'<h2>{i}</h2>'+ VD[i][1].to_html(classes="table table-striped table-hover table-condensed table-responsive")
  folium.Marker(location=VD[i][0], popup=folium.Popup(IFrame(html=html, width=220, height=280), max_width=300), icon=folium.Icon(color='red')).add_to(map_taiwan)

#eTag顯示 #資料運算在更下面兩欄程式碼
eTag = {"eTag_24.8":[(25.07738, 121.51811), "圓山-台北",data_ETC248], "eTag_26.4":[(25.077463, 121.50139), "台北-三重", data_ETC264], "eTag_29.3":[(25.07476, 121.47354), "三重-五股",pd.DataFrame(["請看開頭ETC"])]}
for i in eTag:
  html = f'<h3>{i}</h3>{eTag[i][1]}'+ eTag[i][2].to_html(classes="table table-striped table-hover table-condensed table-responsive")
  folium.Marker(location=eTag[i][0], popup=folium.Popup(IFrame(html=html, width=220, height=280), max_width=300), icon=folium.Icon(color='orange',icon='flag')).add_to(map_taiwan)

#CMS顯示 #CMS-N1-S-23.600-M #CMS-N1-S-22.550-M #CMS-N1-S-21.950-M
data_CMS = pd.read_csv('https://drive.google.com/uc?export=download&id=1f4dw-ZFMosBNOow98ZP8aP7tSpJeqFhl', header = None, names = ["ID", "CMS Message", "Time"])
CMS_2195 = data_CMS[data_CMS['ID'] == "CMS-N1-S-21.950-M"].drop(["ID"], axis = 1).set_index(['Time'])
CMS_2255 = data_CMS[data_CMS['ID'] == "CMS-N1-S-22.550-M"].drop(["ID"], axis = 1).set_index(['Time'])
CMS_2360 = data_CMS[data_CMS['ID'] == "CMS-N1-S-23.600-M"].drop(["ID"], axis = 1).set_index(['Time'])
CMS = {"CMS_23.60":[(25.073954,121.52811), CMS_2360], "CMS_22.55":[(25.073048, 121.53822), CMS_2255], "CMS_21.95":[(25.073088, 121.54418), CMS_2195]}
for i in CMS:
  html = f'<h2>{i}</h2>'+ CMS[i][1].to_html(classes="table table-striped table-hover table-condensed table-responsive")
  folium.Marker(location=CMS[i][0], popup=folium.Popup(IFrame(html=html, width=230, height=280), max_width=300), icon=folium.Icon(color='purple',icon='star')).add_to(map_taiwan)

# 顯示地圖
map_taiwan.show_in_browser()

'''
--------------------------------------------------------------------------------------------------------------------------------------------------------------
'''
#這邊做圖

#圖1
fig = plt.figure(figsize=(6, 6))
ax = fig.add_subplot()
for j in VD:
  draw_VD = pd.DataFrame()
  for i in range(4):
    speed = VD[j][1].iloc[(4*i):(4*i+4),0]
    count = VD[j][1].iloc[(4*i):(4*i+4),1]
    VD_time = pd.DataFrame([[round(np.average(speed, weights=count),2),count.sum(),i+16]], columns = ['Speed','Volume','Time'])
    draw_VD = pd.concat([draw_VD, VD_time], ignore_index=False)
  draw_VD = draw_VD.set_index(keys = ['Time'])
  ax.plot(draw_VD.index,draw_VD['Speed'], label=j, marker='o')

eTag2 = {"eTag_24.8_eTag_26.4":[(25.07738, 121.51811), "台北",data_ETC248], "eTag_26.4_eTag_29.3":[(25.077463, 121.50139), "三重", data_ETC264]}
for i in eTag2:
  ETC = eTag2[i][2].reset_index()
  ETC['Time'] = [16, 17, 18, 19]
  ETC = ETC.set_index(keys = ['Time'])
  ax.plot(ETC.index,ETC['Speed'], label= i , linestyle='dashed',marker='o')

ax.set_xlabel('Time')
ax.set_ylabel('Speed')
ax.set_title('Speed')
plt.xticks(range(16, 20), ['16時', '17時', '18時', '19時'])
ax.legend()
plt.show()


#圖2

fig = plt.figure(figsize=(6, 6))
ax = fig.add_subplot()

for j in VD:
  draw_VD = pd.DataFrame()
  for i in range(4):
    speed = VD[j][1].iloc[(4*i):(4*i+4),0]
    count = VD[j][1].iloc[(4*i):(4*i+4),1]
    VD_time = pd.DataFrame([[round(np.average(speed, weights=count),2),count.sum(),i+16]], columns = ['Speed','Volume','Time'])
    draw_VD = pd.concat([draw_VD, VD_time], ignore_index=False)
  draw_VD = draw_VD.set_index(keys = ['Time'])
  ax.plot(draw_VD.index, draw_VD['Volume'], label=j, marker='o')

for i in eTag2:
  ETC = eTag2[i][2].reset_index()
  ETC['Time'] = [16, 17, 18, 19]
  ETC = ETC.set_index(keys = ['Time'])
  ax.plot(ETC.index, ETC['Volume'], label= i , linestyle='dashed',marker='o')

ax.set_xlabel('Time')
ax.set_ylabel('Volume')
ax.set_title('Volume')
plt.xticks(range(16, 20), ['16時', '17時', '18時', '19時'])
ax.legend()
plt.show()



# 圖3
fig = plt.figure(figsize=(6, 6))
ax = fig.add_subplot()

for j in VD:
  draw_VD = pd.DataFrame()
  for i in range(4):
    speed = VD[j][1].iloc[(4*i):(4*i+4),0]
    count = VD[j][1].iloc[(4*i):(4*i+4),1]
    speed = round(np.average(speed, weights=count),2)
    count = count.sum()
    VD_time = pd.DataFrame([[speed,count,count/speed,i+16]], columns = ['Speed','Volume','Density','Time'])
    draw_VD = pd.concat([draw_VD, VD_time], ignore_index=False)
  draw_VD = draw_VD.set_index(keys = ['Time'])
  ax.plot(draw_VD.index, draw_VD['Density'], label=j, marker='o')

for i in eTag2:
  ETC = eTag2[i][2].reset_index()
  ETC['Time'] = [16, 17, 18, 19]
  ETC['Density'] = ETC['Volume']/ETC['Speed']
  ETC = ETC.set_index(keys = ['Time'])
  ax.plot(ETC.index, ETC['Density'], label= i , linestyle='dashed',marker='o')

ax.set_xlabel('Time')
ax.set_ylabel('Density')
ax.set_title('Density')
plt.xticks(range(16, 20), ['16時', '17時', '18時', '19時'])
ax.legend()
plt.show()


#圖4
fig = plt.figure(figsize=(6, 6))
ax = fig.add_subplot(projection='3d')

for j in VD:
  draw_VD = pd.DataFrame()
  for i in range(4):
    speed = VD[j][1].iloc[(4*i):(4*i+4),0]
    count = VD[j][1].iloc[(4*i):(4*i+4),1]
    speed = round(np.average(speed, weights=count),2)
    count = count.sum()
    VD_time = pd.DataFrame([[speed,count,count/speed,i+16]], columns = ['Speed','Volume','Density','Time'])
    draw_VD = pd.concat([draw_VD, VD_time], ignore_index=False)
  draw_VD = draw_VD.set_index(keys = ['Time'])
  ax.plot(draw_VD['Speed'], draw_VD['Density'], draw_VD['Volume'], label=j, marker = 'o')
  ax.scatter( 35,draw_VD['Density'], draw_VD['Volume'] , marker = 'o')

for i in eTag2:
  ETC = eTag2[i][2].reset_index()
  ETC['Density'] = ETC['Volume']/ETC['Speed']
  ETC['Time'] = [16, 17, 18, 19]
  ETC = ETC.set_index(keys = ['Time'])
  ax.plot( ETC['Speed'],ETC['Density'] ,ETC['Volume'], label= i , linestyle='dashed', marker = 'o')
  ax.scatter( 35,ETC['Density'] ,ETC['Volume'], marker = 'o')

ax.set_xlabel('Speed')
ax.set_ylabel('Density')
ax.set_zlabel('Volume')
ax.set_title('速率-流量-密度')
ax.legend()
plt.show()

#圖5
fig = plt.figure(figsize=(6, 6))
ax = fig.add_subplot()

for j in VD:
  draw_VD = pd.DataFrame()
  for i in range(4):
    speed = VD[j][1].iloc[(4*i):(4*i+4),0]
    count = VD[j][1].iloc[(4*i):(4*i+4),1]
    speed = round(np.average(speed, weights=count),2)
    count = count.sum()
    VD_time = pd.DataFrame([[speed,count,count/speed,i+16]], columns = ['Speed','Volume','Density','Time'])
    draw_VD = pd.concat([draw_VD, VD_time], ignore_index=False)
  draw_VD = draw_VD.set_index(keys = ['Time'])
  ax.plot(draw_VD['Density'], draw_VD['Speed'], label=j, marker = 'o')

for i in eTag2:
  ETC = eTag2[i][2].reset_index()
  ETC['Density'] = ETC['Volume']/ETC['Speed']
  ETC['Time'] = [16, 17, 18, 19]
  ETC = ETC.set_index(keys = ['Time'])
  ax.plot(ETC['Density'], ETC['Speed'], label= i , linestyle='dashed', marker = 'o')

ax.set_xlabel('Density')
ax.set_ylabel('Speed')
ax.set_title('速率-密度')
ax.legend()
plt.show()